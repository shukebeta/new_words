import 'package:flutter/material.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:provider/provider.dart';
import 'package:new_words/entities/word_explanation.dart';
import 'package:new_words/features/add_word/presentation/add_word_dialog.dart';
import 'package:new_words/providers/vocabulary_provider.dart';
// import 'package:url_launcher/url_launcher.dart'; // For opening links in markdown, if needed

class WordDetailScreen extends StatefulWidget {
  final WordExplanation wordExplanation;

  const WordDetailScreen({super.key, required this.wordExplanation});

  static const routeName = '/word-detail'; // Example route name

  @override
  State<WordDetailScreen> createState() => _WordDetailScreenState();
}

class _WordDetailScreenState extends State<WordDetailScreen> {
  late WordExplanation _currentExplanation;
  DateTime? _lastRefreshTime;

  @override
  void initState() {
    super.initState();
    _currentExplanation = widget.wordExplanation;
  }

  bool get _canRefresh {
    if (_lastRefreshTime == null) return true;
    return DateTime.now().difference(_lastRefreshTime!).inSeconds > 30;
  }

  Future<void> _refreshExplanation() async {
    final provider = Provider.of<VocabularyProvider>(context, listen: false);

    final result = await provider.refreshExplanation(_currentExplanation);

    if (!mounted) return;

    if (result.isSuccess) {
      if (result.wasUpdated && result.updatedExplanation != null) {
        // Successfully updated
        setState(() {
          _currentExplanation = result.updatedExplanation!;
          _lastRefreshTime = DateTime.now();
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Explanation refreshed successfully'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        // No update needed
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(result.message),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } else {
      // Error occurred
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result.message), backgroundColor: Colors.red),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<VocabularyProvider>(
      builder: (context, provider, child) {
        return Scaffold(
          resizeToAvoidBottomInset: true,
          appBar: AppBar(title: Text(_currentExplanation.wordText)),
          body: SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: <Widget>[
                const Divider(),
                MarkdownBody(
                  data: _currentExplanation.markdownExplanation,
                  selectable: true,
                  // onTapLink: (text, href, title) { // Optional: handle link taps
                  //   if (href != null) {
                  //     launchUrl(Uri.parse(href));
                  //   }
                  // },
                ),
                const Divider(),
                Row(
                  children: [
                    Text(
                      'Generated by: ${_currentExplanation.providerModelName ?? 'Unknown'}',
                      style: const TextStyle(fontSize: 12, color: Colors.grey),
                    ),
                    const Text(
                      ' â€¢ ',
                      style: TextStyle(fontSize: 12, color: Colors.grey),
                    ),
                    if (provider.isRefreshing)
                      const Text(
                        'Refreshing...',
                        style: TextStyle(fontSize: 12, color: Colors.grey),
                      )
                    else
                      GestureDetector(
                        onTap: _canRefresh ? _refreshExplanation : null,
                        child: Text(
                          'Refresh',
                          style: TextStyle(
                            fontSize: 12,
                            color:
                                _canRefresh
                                    ? Theme.of(context).colorScheme.primary
                                    : Colors.grey,
                            decoration: TextDecoration.underline,
                          ),
                        ),
                      ),
                  ],
                ),
                // Optionally display other fields like pronunciation, definitions, examples
                // if (_currentExplanation.pronunciation != null) ...[],
                // if (_currentExplanation.definitions != null) ...[],
                // if (_currentExplanation.examples != null) ...[],
              ],
            ),
          ),
          floatingActionButton: FloatingActionButton(
            onPressed:
                () async => AddWordDialog.show(context, replacePage: true),
            tooltip: 'Add New Word',
            child: const Icon(Icons.add),
          ),
        );
      },
    );
  }
}
